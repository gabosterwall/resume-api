openapi: 3.1.0
info:
  version: 1.0.0
  title: Resume API
  contact:
    email: contact@example.com
    url: http://example.com/contact
  license:
    name:
    url:
  description: >
    Developed by Gabriél Österwall

    # Introduction
    
    Welcome to the Resume API, designed to showcase my API development skills as well as to provide users with a fun and unconventional way of accessing and interacting with my resume. Users can not only view the complete resume but also share their thoughts by leaving comments. The API is structured around REST principles, delivering JSON-encoded responses, utilizing standard HTTP response codes, and incorporating a secure authentication mechanism.
    Whether you aim to retrieve the entire resume or specific sections, authentication via a JSON Web Token (JWT) is required. JWTs are issued upon registration or login and remain valid for 30 minutes, ensuring a secure and seamless experience.
    </br></br>
    The API encompasses CRUD operations, granting users the ability to manage their accounts, including the option to delete their account or any published comments. All available endpoints are outlined below.
    
    # Authentication

    To safeguard specific endpoints, the API employs JSON Web Tokens for authentication. Tokens, lasting for 30 minutes, are provided upon registration or login. To authenticate a request to a protected endpoint, simply include the bearer token in the Authorization header.  

    # How to use

    Experience the API effortlessly through this interactive documentation. Alternatively, interact with the API using standard tools such as Curl or dedicated API clients like Postman or Insomnia.
servers:
    - url: "https://resume-api-y1zl.onrender.com"
      description: "My server"

tags:
  - name: User
    description: Available operations about users
  - name: Resume
    description: Available operations about the resume
  - name: Comment
    description: Available operations about comments

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@email.com
        password:
          type: string
          example: ToDoeOrNotToDoe123
        admin:
          type: boolean
          example: false
      required:
        - id
        - name
        - email
        - password
        - admin
    Resume:
      type: object
      properties:
        contact:
          type: object
          properties:
            name:
              type: string
              required: true
            email:
              type: string
              required: true
            network:
              type: object
              additionalProperties:
                type: string
          required:
            - name
            - email
        skills:
          type: object
          properties:
            languages:
              type: array
              items:
                type: string
            technologies:
              type: array
              items:
                type: string
        education:
          type: array
          items:
            type: object
            properties:
              degree:
                type: string
                required: true
              school:
                type: string
                required: true
              graduationYear:
                type: string
                required: true
              coursework:
                type: array
                items:
                  type: string
                required: true
          required: true
        experience:
          type: array
          items:
            type: object
            properties:
              position:
                type: string
                required: true
              organization:
                type: string
                required: true
              startDate:
                type: string
                required: true
              endDate:
                type: string
              responsibilities:
                type: array
                items:
                  type: string
          required: true
        projects:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
                required: true
              description:
                type: string
                required: true
              technologies:
                type: array
                items:
                  type: string
                required: true
              url:
                type: string
          required: true
    Comment:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
          example: This is a comment!
      required:
        - id
        - text

paths:
  /resume:
    get:
      tags:
        - Resume
      summary: Fetch whole resume
      description: Requires a valid Bearer token in the Authorization header
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User unauthorized, missing token. 
        
  /resume/{section}:
    get:
      tags:
        - Resume
      summary: Fetch certain section
      description: Requires a valid Bearer token in the Authorization header.
      security:
        - BearerAuth: []
      parameters:
        - name: section
          in: path
          description: The name of the section you want to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume'
                example: A section object. 
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Inputed section not found. 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token is missing in the Authorization header.
  /users:
    post:
      tags:
        - User
      summary: Register a new user
      description: Register a new user with the provided name, email, and password.
      requestBody:
        description: Create user object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: User successfully registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  admin:
                    type: string
                    example: false or true 
                  token:
                    type: string
                    example: your token here, use it to access protected routes.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Fields missing or email already in use.
    put:
      tags:
        - User
      summary: Update user information
      description: This endpoint allow you to update your current name, email and/or password. 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User information successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                example: A section object.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Fields missing or email already in use.
    delete:
      tags:
      - User
      summary: Delete user
      description: This endpoint allows users to delete their account and information from the database. 
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfull request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully deleted user with id:{id}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Either a token is missing or is invalid.
  /users/login:
    post:
      tags:
        - User
      summary: Authenticate existing user
      description: This endpoint allow existing users to generate a new token, using their email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '201':
          description: User successfully authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  admin:
                    type: string
                    example: false or true 
                  token:
                    type: string
                    example: your token here, use it to access protected routes.
                  
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid credentials.

  /comments:
    get:
      tags:
        - Comment
      summary: Get comments
      description: Retrieve all the comments that you've published.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response

    post:
      tags:
        - Comment
      summary: Post new comment
      description: Requires a valid Bearer token in the Authorization header.
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                required:
                  - text

  /comments/{id}:
    delete:
      tags:
          - Comment
      summary: Delete comment
      description: Requires a valid Bearer token in the Authorization header, as well as the id of the comment to remove.
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                required:
                  - _id